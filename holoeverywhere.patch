diff --git java/android/support/v4/app/FragmentActivity.java java/android/support/v4/app/FragmentActivity.java
index 596653a..199e926 100644
--- java/android/support/v4/app/FragmentActivity.java
+++ java/android/support/v4/app/FragmentActivity.java
@@ -163,7 +163,7 @@ public class FragmentActivity extends Activity {
                 Log.w(TAG, "Activity result no fragment exists for index: 0x"
                         + Integer.toHexString(requestCode));
             } else {
-                frag.onActivityResult(requestCode&0xffff, resultCode, data);
+                rOnActivityResult(frag, requestCode & 0xffff, resultCode, data);
             }
             return;
         }
@@ -171,6 +171,17 @@ public class FragmentActivity extends Activity {
         super.onActivityResult(requestCode, resultCode, data);
     }
 
+    private void rOnActivityResult(Fragment fragment, int requestCode, int resultCode, Intent data) {
+        fragment.onActivityResult(requestCode, resultCode, data);
+        if(fragment.mChildFragmentManager != null && fragment.mChildFragmentManager.mActive != null) {
+            for(Fragment childFragment : fragment.mChildFragmentManager.mActive) {
+                if(childFragment != null) {
+                    rOnActivityResult(childFragment, requestCode, resultCode, data);
+                }
+            }
+        }
+    }
+
     /**
      * Take care of popping the fragment back stack or finishing the activity
      * as appropriate.
diff --git java/android/support/v4/app/FragmentManager.java java/android/support/v4/app/FragmentManager.java
index 37b37d2..aba36be 100644
--- java/android/support/v4/app/FragmentManager.java
+++ java/android/support/v4/app/FragmentManager.java
@@ -869,6 +869,7 @@ final class FragmentManagerImpl extends FragmentManager {
                 case Fragment.INITIALIZING:
                     if (DEBUG) Log.v(TAG, "moveto CREATED: " + f);
                     if (f.mSavedFragmentState != null) {
+                        f.mSavedFragmentState.setClassLoader(mActivity.getClassLoader());
                         f.mSavedViewState = f.mSavedFragmentState.getSparseParcelableArray(
                                 FragmentManagerImpl.VIEW_STATE_TAG);
                         f.mTarget = getFragment(f.mSavedFragmentState,
@@ -912,7 +913,7 @@ final class FragmentManagerImpl extends FragmentManager {
                                 f.mSavedFragmentState), null, f.mSavedFragmentState);
                         if (f.mView != null) {
                             f.mInnerView = f.mView;
-                            f.mView = NoSaveStateFrameLayout.wrap(f.mView);
+                            f.mView = NoSaveStateFrameLayout.wrap(f, f.mView);
                             if (f.mHidden) f.mView.setVisibility(View.GONE);
                             f.onViewCreated(f.mView, f.mSavedFragmentState);
                         } else {
@@ -939,7 +940,7 @@ final class FragmentManagerImpl extends FragmentManager {
                                     f.mSavedFragmentState), container, f.mSavedFragmentState);
                             if (f.mView != null) {
                                 f.mInnerView = f.mView;
-                                f.mView = NoSaveStateFrameLayout.wrap(f.mView);
+                                f.mView = NoSaveStateFrameLayout.wrap(f, f.mView);
                                 if (container != null) {
                                     Animation anim = loadAnimation(f, transit, true,
                                             transitionStyle);
diff --git java/android/support/v4/app/NoSaveStateFrameLayout.java java/android/support/v4/app/NoSaveStateFrameLayout.java
index d0ebb96..c9f9480 100644
--- java/android/support/v4/app/NoSaveStateFrameLayout.java
+++ java/android/support/v4/app/NoSaveStateFrameLayout.java
@@ -28,7 +28,20 @@ import android.widget.FrameLayout;
  * so instead we insert this between the view and its parent.
  */
 class NoSaveStateFrameLayout extends FrameLayout {
+    static interface NoSaveStateFrameLayoutCreator {
+        public ViewGroup create(Fragment fragment, View child);
+    }
+	
+    static NoSaveStateFrameLayoutCreator sNoSaveStateFrameLayoutCreator;
+
     static ViewGroup wrap(View child) {
+        return wrap(null, child);
+    }
+
+    static ViewGroup wrap(Fragment fragment, View child) {
+        if (sNoSaveStateFrameLayoutCreator != null) {
+            return sNoSaveStateFrameLayoutCreator.create(fragment, child);
+        }
         NoSaveStateFrameLayout wrapper = new NoSaveStateFrameLayout(child.getContext());
         ViewGroup.LayoutParams childParams = child.getLayoutParams();
         if (childParams != null) {
diff --git java/android/support/v4/view/ViewCompat.java java/android/support/v4/view/ViewCompat.java
index bb64afc..c62ef55 100644
--- java/android/support/v4/view/ViewCompat.java
+++ java/android/support/v4/view/ViewCompat.java
@@ -229,6 +229,7 @@ public class ViewCompat {
         public int getMeasuredState(View view);
         public int getAccessibilityLiveRegion(View view);
         public void setAccessibilityLiveRegion(View view, int mode);
+        public int[] mergeDrawableStates(int[] baseState, int[] additionalState);
     }
 
     static class BaseViewCompatImpl implements ViewCompatImpl {
@@ -334,7 +335,25 @@ public class ViewCompat {
         }
 
         public int resolveSizeAndState(int size, int measureSpec, int childMeasuredState) {
-            return View.resolveSize(size, measureSpec);
+            int result = size;
+            int specMode = View.MeasureSpec.getMode(measureSpec);
+            int specSize = View.MeasureSpec.getSize(measureSpec);
+            switch (specMode) {
+                case View.MeasureSpec.UNSPECIFIED:
+                    result = size;
+                    break;
+                case View.MeasureSpec.AT_MOST:
+                    if (specSize < size) {
+                        result = specSize | MEASURED_STATE_TOO_SMALL;
+                    } else {
+                        result = size;
+                    }
+                    break;
+                case View.MeasureSpec.EXACTLY:
+                    result = specSize;
+                    break;
+            }
+            return result | childMeasuredState & MEASURED_STATE_MASK;
         }
 
         @Override
@@ -361,6 +380,17 @@ public class ViewCompat {
         public void setAccessibilityLiveRegion(View view, int mode) {
             // No-op
         }
+
+        @Override
+        public int[] mergeDrawableStates(int[] baseState, int[] additionalState) {
+            final int N = baseState.length;
+            int i = N - 1;
+            while (i >= 0 && baseState[i] == 0) {
+                i--;
+            }
+            System.arraycopy(additionalState, 0, baseState, i + 1, additionalState.length);
+            return baseState;
+        }
     }
 
     static class EclairMr1ViewCompatImpl extends BaseViewCompatImpl {
@@ -1187,4 +1217,8 @@ public class ViewCompat {
     public void setAccessibilityLiveRegion(View view, int mode) {
         IMPL.setAccessibilityLiveRegion(view, mode);
     }
+
+    public static int[] mergeDrawableStates(int[] baseState, int[] additionalState) {
+        return IMPL.mergeDrawableStates(baseState, additionalState);
+    }
 }
diff --git kitkat/android/support/v4/print/PrintHelperKitkat.java kitkat/android/support/v4/print/PrintHelperKitkat.java
index 89cc9e7..e343fea 100644
--- kitkat/android/support/v4/print/PrintHelperKitkat.java
+++ kitkat/android/support/v4/print/PrintHelperKitkat.java
@@ -45,7 +45,7 @@ import java.io.InputStream;
  */
 class PrintHelperKitkat {
     private static final String LOG_TAG = "PrintHelperKitkat";
-    // will be <= 300 dpi on A4 (8.3Ã—11.7) paper (worst case of 150 dpi)
+    // will be <= 300 dpi on A4 (8.3x11.7) paper (worst case of 150 dpi)
     private final static int MAX_PRINT_SIZE = 3500;
     final Context mContext;
     BitmapFactory.Options mDecodeOptions = null;
