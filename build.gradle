buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'org.holoeverywhere:plugin:0.3.+'
  }
}

apply plugin: 'holoeverywhere-repo'
apply plugin: 'android-library'
apply plugin: 'maven'
apply plugin: 'signing'

archivesBaseName = 'support-v4'
version = '20.1.1'
def baseVersion = '20.0.0'

repositories {
    mavenLocal()
    mavenCentral()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

sourceCompatibility = 1.6
targetCompatibility = 1.6

ext.allSS = []

def baseSS         = createApiSourceset('donut',         'donut',          '4',       null)
def eclairSS       = createApiSourceset('eclair',       'eclair',        '7',       baseSS)
def eclairMr1SS    = createApiSourceset('eclairmr1',    'eclair-mr1',    '7',       eclairSS)
def froyoSS        = createApiSourceset('froyo',        'froyo',         '8',       eclairMr1SS)
def gingerbreadSS  = createApiSourceset('gingerbread',  'gingerbread',   '10',       froyoSS)
def honeycombSS    = createApiSourceset('honeycomb',    'honeycomb',     '11',      gingerbreadSS)
def honeycombMr2SS = createApiSourceset('honeycombmr2', 'honeycomb_mr2', '13',      honeycombSS)
def icsSS          = createApiSourceset('ics',          'ics',           '14',      honeycombMr2SS)
def icsMr1SS       = createApiSourceset('icsmr1',       'ics-mr1',       '15',      icsSS)
def jbSS           = createApiSourceset('jellybean',    'jellybean',     '16',      icsMr1SS)
def jbMr1SS        = createApiSourceset('jellybeanmr1', 'jellybean-mr1', '17',      jbSS)
def jbMr2SS        = createApiSourceset('jellybeanmr2', 'jellybean-mr2', '18',      jbMr1SS)
def kitkatSS       = createApiSourceset('kitkat',       'kitkat',        '19',      jbMr2SS)
def api20SS        = createApiSourceset('api20',        'api20',         '20', kitkatSS)

def FileCollection getAndroidPrebuilt(String apiLevel) {
    files("${android.plugin.sdkFolder}/platforms/android-${apiLevel}/android.jar")
}

def createApiSourceset(String name, String folder, String apiLevel, SourceSet previousSource) {
    def sourceSet = sourceSets.create(name)
    sourceSet.java.srcDirs = [folder]

    def configName = sourceSet.getCompileConfigurationName()

    project.getDependencies().add(configName, getAndroidPrebuilt(apiLevel))
    if (previousSource != null) {
        setupDependencies(configName, previousSource)
    }
    ext.allSS.add(sourceSet)
    return sourceSet
}

def setupDependencies(String configName, SourceSet previousSourceSet) {
    project.getDependencies().add(configName, previousSourceSet.output)
    project.getDependencies().add(configName, previousSourceSet.compileClasspath)
}

// create a jar task for the code above
tasks.create(name: "internalJar", type: Jar) {
    baseName "${archivesBaseName}"
    manifest.attributes('BaseVersion': "${baseVersion}", 'Version': "${project.version} by HoloEverywhere project")
}

ext.allSS.each { ss ->
    internalJar.from ss.output
}

configurations {
    deployerJars
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ssh-external:2.2"
    compile files('android-support-annotations.jar')
    compile files(internalJar.archivePath)
}

android {
    compileSdkVersion 4
    buildToolsVersion "20.0.0"

    defaultConfig {
        minSdkVersion 4
        targetSdkVersion 20
    }

    sourceSets {
        main.manifest.srcFile 'AndroidManifest.xml'
        main.java.srcDirs = ['java']
        main.aidl.srcDirs = ['java']

        androidTest.setRoot('tests')
        androidTest.java.srcDir 'tests/java'
    }

    lintOptions {
        abortOnError false
    }
}

android.libraryVariants.all { variant ->
    variant.javaCompile.dependsOn internalJar

    def name = variant.buildType.name

    if (name.equals("debug")) {
        return; // Skip debug builds.
    }
    def suffix = name.capitalize()

    def jarTask = project.tasks.create(name: "jar${suffix}", type: Jar){
        dependsOn variant.javaCompile
        from variant.javaCompile.destinationDir
        from 'LICENSE.txt'
    }
	project.ext.allSS.each { ss ->
		jarTask.from ss.output
	}
    def javadocTask = project.tasks.create(name: "javadoc${suffix}", type: Javadoc) {
        source android.sourceSets.main.java.sourceFiles
        classpath = files(variant.javaCompile.classpath.files) + getAndroidPrebuilt(android.compileSdkVersion)
    }

    def javadocJarTask = project.tasks.create(name: "javadocJar${suffix}", type: Jar) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    def sourcesJarTask = project.tasks.create(name: "sourceJar${suffix}", type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    project.ext.allSS.each { ss ->
        javadocTask.source ss.allJava
        sourcesJarTask.from ss.allSource
    }

	artifacts.add('archives', jarTask);
    artifacts.add('archives', javadocJarTask);
    artifacts.add('archives', sourcesJarTask);
}

signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            configuration = configurations.deployerJars
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            pom.groupId = 'com.android.support'
            pom.artifactId = 'support-v4'

            def String repoUrl = project.properties.get('holoeverywhere.repo', 'file:///invalid_path')
            if (repoUrl.startsWith('scpexe://')) {
                repository(url: repoUrl) {
                    authentication(userName: project.properties.get('holoeverywhere.repo.username'), privateKey: project.properties.get('holoeverywhere.repo.key'))
                }
            } else {
                repository(url: repoUrl)
            }

            pom.whenConfigured { pom ->
                pom.dependencies = pom.dependencies.findAll { dep -> dep.groupId != 'android' && dep.artifactId != 'android' }
            }

            pom.project {
                name 'Android Support Library v4'
                packaging 'jar'
                description 'Android Support library v4 with patches by ProK'
                url 'https://github.com/Prototik/HoloEverywhere'

                scm {
                    url 'https://github.com/Prototik/HoloEverywhere'
                    connection 'scm:git@github.com:Prototik/HoloEverywhere.git'
                    developerConnection 'scm:git@github.com:Prototik/HoloEverywhere.git'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://raw.github.com/Prototik/HoloEverywhere/master/LICENSE'
                        distribution 'repo'
                        comments 'Copyright (c) 2013 Sergey Shatunov'
                    }
                }

                developers {
                    developer {
                        id 'Prototik'
                        name 'Sergey Shatunov'
                        email 'prototypegamez@gmail.com'
                        timezone '+8'
                        roles {
                            role "developer"
                        }
                    }
                }
            }
        }
    }
}

